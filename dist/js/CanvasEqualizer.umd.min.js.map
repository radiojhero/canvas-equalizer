{"version":3,"file":"CanvasEqualizer.umd.min.js","sources":["../../src/ts/Common.ts","../../src/ts/FFTNR.ts","../../src/ts/Equalizer.ts","../../src/ts/L10n.ts","../../src/ts/CanvasEqualizer.ts"],"sourcesContent":["/**\n * canvas-equalizer is distributed under the FreeBSD License\n *\n * Copyright (c) 2012-2017 Armando Meziat, Carlos Rafael Gimenes das Neves\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, this\n *    list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * The views and conclusions contained in the software and documentation are those\n * of the authors and should not be interpreted as representing official policies,\n * either expressed or implied, of the FreeBSD Project.\n *\n * https://github.com/radiojhero/canvas-equalizer\n */\n\n// miscellaneous functions\n\n(function (window: Window) {\n    try {\n        new CustomEvent('test');\n    }\n    catch (e) {\n        return; // no need to polyfill\n    }\n\n    // polyfills DOM4 CustomEvent\n    function MouseEvent(eventType: string, params: MouseEventInit) {\n        params = params || { bubbles: false, cancelable: false };\n        const mouseEvent = document.createEvent('MouseEvent');\n        mouseEvent.initMouseEvent(eventType, params.bubbles!, params.cancelable!, window, 1,\n                                  params.screenX!, params.screenY!, params.clientX!, params.clientY!,\n                                  params.ctrlKey!, params.altKey!, params.shiftKey!, params.metaKey!,\n                                  0, null);\n\n        return mouseEvent;\n    }\n\n    MouseEvent.prototype = Event.prototype;\n\n    (window as any).MouseEvent = MouseEvent;\n})(window);\n\ntype PointerEventShortName = 'down' | 'move' | 'up';\ntype AttachDetachSignature = (observable: EventTarget, eventName: PointerEventShortName,\n                              targetFunction: (e: MouseEvent) => any, capturePhase?: boolean) => void;\n\nlet attachPointer: AttachDetachSignature;\nlet detachPointer: AttachDetachSignature;\n\nfunction wrap(func: any, wrapper: any, tag: string, elem: EventTarget): any {\n    const wrapperTag = `__${tag}_wrapper__`;\n\n    if (!func[wrapperTag]) {\n        func[wrapperTag] = [];\n    }\n\n    unwrap(func, tag, elem);\n    func[wrapperTag].push({ elem, wrapper });\n    return wrapper;\n}\n\nfunction unwrap(func: any, tag: string, elem: EventTarget): any {\n    const wrapperTag = `__${tag}_wrapper__`;\n\n    let ret: any;\n\n    if (func[wrapperTag]) {\n        func[wrapperTag] = func[wrapperTag].filter((entry: { elem: EventTarget, wrapper: any }, i: number) => {\n            if (entry.elem === elem) {\n                ret = entry.wrapper;\n                return false;\n            }\n\n            return true;\n        });\n    }\n\n    return ret;\n}\n\nif ((window as any).PointerEvent) {\n    attachPointer = function (observable: EventTarget, eventName: PointerEventShortName,\n                              targetFunction: (e: MouseEvent) => any, capturePhase?: boolean) {\n        observable.addEventListener(`pointer${eventName}`, targetFunction as EventListener, capturePhase);\n    };\n    detachPointer = function (observable: EventTarget, eventName: PointerEventShortName,\n                              targetFunction: (e: MouseEvent) => any, capturePhase?: boolean) {\n        observable.removeEventListener(`pointer${eventName}`, targetFunction as EventListener, capturePhase);\n    };\n}\nelse if ('ontouchend' in document) {\n    const mappings: any = {\n        down: ['start'],\n        move: ['move'],\n        up: ['end', 'cancel'],\n    };\n    attachPointer = function (observable: EventTarget, eventName: PointerEventShortName,\n                              targetFunction: (e: MouseEvent) => any, capturePhase?: boolean) {\n        const wrapper = (e: TouchEvent) => {\n            const touch = e.changedTouches[0];\n            const pseudoMouse = new MouseEvent(`mouse${eventName}`, {\n                altKey: e.altKey,\n                clientX: touch && touch.clientX || 0,\n                clientY: touch && touch.clientY || 0,\n                ctrlKey: e.ctrlKey,\n                metaKey: e.metaKey,\n                screenX: touch && touch.screenX || 0,\n                screenY: touch && touch.screenY || 0,\n                shiftKey: e.shiftKey,\n            });\n\n            (pseudoMouse as any).clonedFromTouch = true;\n\n            const result = targetFunction(pseudoMouse);\n\n            if (result === false || pseudoMouse.defaultPrevented) {\n                cancelEvent(e);\n            }\n\n            return result;\n        };\n\n        mappings[eventName].forEach((mapping: string) => {\n            observable.addEventListener(`touch${mapping}`,\n                wrap(targetFunction, wrapper, `touch${eventName}`, observable), capturePhase);\n        });\n    };\n    detachPointer = function (observable: EventTarget, eventName: PointerEventShortName,\n                              targetFunction: (e: MouseEvent) => any, capturePhase?: boolean) {\n        mappings[eventName].forEach((mapping: string) => {\n            observable.removeEventListener(`touch${mapping}`,\n                unwrap(targetFunction, `touch${eventName}`, observable), capturePhase);\n        });\n    };\n}\nelse {\n    attachPointer = function (observable: EventTarget, eventName: PointerEventShortName,\n                              targetFunction: (e: MouseEvent) => any, capturePhase?: boolean) {\n        observable.addEventListener(`mouse${eventName}`, targetFunction as EventListener, capturePhase);\n    };\n    detachPointer = function (observable: EventTarget, eventName: PointerEventShortName,\n                              targetFunction: (e: MouseEvent) => any, capturePhase?: boolean) {\n        observable.removeEventListener(`mouse${eventName}`, targetFunction as EventListener, capturePhase);\n    };\n}\n\nconst runningFuncs: (() => void)[] = [];\n\nexport { attachPointer, detachPointer };\n\n/* tslint:disable:no-magic-numbers object-literal-sort-keys */\nexport const keyFix: any = {\n    Backspace: 8,\n    '\\t': ['Tab', 9],\n    '\\n': ['Enter', 13],\n    Escape: 27,\n    End: 35,\n    Home: 36,\n    ArrowLeft: 37,\n    ArrowUp: 38,\n    ArrowRight: 39,\n    ArrowDown: 40,\n    Delete: 46,\n};\n/* tslint:enable:no-magic-numbers object-literal-sort-keys */\n\nexport function keyPressed(e: KeyboardEvent, ...chars: string[]) {\n    for (let i = 0; i < chars.length; i++) {\n        const chr = chars[i];\n        if (Object.keys(keyFix).indexOf(chr) !== -1) {\n            const [key, keyCode] = Array.isArray(keyFix[chr]) ? keyFix[chr] : [chr, keyFix[chr]];\n            if (e.key === key || e.keyCode === keyCode) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nexport function cancelEvent(e: Event) {\n    e.preventDefault();\n    e.stopPropagation();\n    return false;\n}\n\nexport function throttledFunction(func: () => void, timeout?: number) {\n    if (runningFuncs.indexOf(func) === -1) {\n        runningFuncs.push(func);\n        const wrapper = () => {\n            func();\n            runningFuncs.splice(runningFuncs.indexOf(func), 1);\n        };\n\n        if (timeout) {\n            setTimeout(wrapper, timeout);\n        }\n        else {\n            requestAnimationFrame(wrapper);\n        }\n    }\n}\n\nexport function addThrottledEvent(observable: EventTarget,\n                                  eventName: string,\n                                  targetFunction: (e?: Event) => any,\n                                  capturePhase?: boolean) {\n    let running = false;\n    const wrapper = (e: Event) => {\n        if (!running) {\n            running = true;\n            requestAnimationFrame(() => {\n                targetFunction(e);\n                running = false;\n            });\n        }\n    };\n\n    observable.addEventListener(eventName,\n        wrap(targetFunction, wrapper, `throttle${eventName}`, observable), capturePhase);\n}\n\nexport function removeThrottledEvent(observable: EventTarget,\n                                     eventName: string,\n                                     targetFunction: (e?: Event) => any,\n                                     capturePhase?: boolean) {\n    observable.removeEventListener(eventName,\n        unwrap(targetFunction, `throttle${eventName}`, observable), capturePhase);\n}\n\nexport function elemCoords(elem: HTMLElement, e: MouseEvent): { x: number, y: number } {\n    const rect = elem.getBoundingClientRect();\n    return {\n        x: e.clientX - rect.left,\n        y: e.clientY - rect.top,\n    };\n}\n","/**\n * canvas-equalizer is distributed under the FreeBSD License\n *\n * Copyright (c) 2012-2017 Armando Meziat, Carlos Rafael Gimenes das Neves\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, this\n *    list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * The views and conclusions contained in the software and documentation are those\n * of the authors and should not be interpreted as representing official policies,\n * either expressed or implied, of the FreeBSD Project.\n *\n * https://github.com/radiojhero/canvas-equalizer\n */\n\n/*==============================================================================\n *\n * This algorithm is an adaptation of the algorithm from the hardcover\n * book \"Numerical Recipes: The Art of Scientific Computing, 3rd Edition\",\n * with some additional optimizations and changes.\n *\n * I HIGHLY recommend this book!!! :D\n *\n *==============================================================================\n */\n\n/* Ordering of data\n * time [0]          | Real [bin 0]\n * time [1]          | Real [bin length/2]\n * time [2]          | Real [bin 1]\n * time [3]          | Imag [bin 1]\n * time [...]        | Real [bin ...]\n * time [...]        | Imag [bin ...]\n * time [length-2]   | Real [bin length/2-1]\n * time [length-1]   | Imag [bin length/2-1]\n */\n\n/* tslint:disable:no-magic-numbers no-bitwise */\n\nexport function FFTComplex(data: Float32Array, n: number, isign: number) {\n    const nn = n << 1;\n    let mmax: number;\n    let m: number;\n    let j = 1;\n    let istep: number;\n    let i: number;\n    let wr: number;\n    let wpr: number;\n    let wpi: number;\n    let wi: number;\n    let theta: number;\n    let tempr: number;\n    let tempi: number;\n    let halfmmax: number;\n    let dj1: number;\n    let dj: number;\n\n    // bit reversal swap\n    for (i = 1; i < nn; i += 2) {\n        if (j > i) {\n            tempr = data[j - 1];\n            data[j - 1] = data[i - 1];\n            data[i - 1] = tempr;\n            tempr = data[j];\n            data[j] = data[i];\n            data[i] = tempr;\n        }\n\n        m = n;\n\n        while (m >= 2 && j > m) {\n            j -= m;\n            m >>>= 1;\n        }\n\n        j += m;\n    }\n\n    // first pass (mmax = 2 / wr = 1 / wi = 0)\n    for (i = 1; i <= nn; i += 4) {\n        j = i + 2;\n        tempr = data[j - 1];\n        tempi = data[j];\n        data[j - 1] = data[i - 1] - tempr;\n        data[j] = data[i] - tempi;\n        data[i - 1] += tempr;\n        data[i] += tempi;\n    }\n\n    /* I decided not to unroll the following steps in favor of the cache memory\n\n    // second pass (mmax = 4 / wr = 1 / wi = 0) A\n    for (i = 1; i <= nn; i += 8) {\n        j = i + 4;\n        tempr = data[j - 1];\n        tempi = data[j];\n        data[j - 1] = data[i - 1] - tempr;\n        data[j] = data[i] - tempi;\n        data[i - 1] += tempr;\n        data[i] += tempi;\n    }\n\n    // second pass (mmax = 4 / wr = 0 / wi = isign) B\n    if (isign === 1) {\n        for (i = 3; i <= nn; i += 8) {\n            j = i + 4;\n            tempr = -data[j];\n            tempi = data[j - 1];\n            data[j - 1] = data[i - 1] - tempr;\n            data[j] = data[i] - tempi;\n            data[i - 1] += tempr;\n            data[i] += tempi;\n        }\n    }\n    else {\n        for (i = 3; i <= nn; i += 8) {\n            j = i + 4;\n            tempr = data[j];\n            tempi = -data[j - 1];\n            data[j - 1] = data[i - 1] - tempr;\n            data[j] = data[i] - tempi;\n            data[i - 1] += tempr;\n            data[i] += tempi;\n        }\n    }\n\n    mmax = 8;\n    theta = isign * Math.PI * 0.25;\n    */\n\n    mmax = 4;\n    theta = isign * Math.PI * 0.5;\n\n    while (nn > mmax) {\n        istep = mmax << 1;\n        wpi = Math.sin(theta);\n        theta *= 0.5;\n        wpr = Math.sin(theta);\n        wpr *= -2.0 * wpr;\n\n        // ---------------------------------------------\n        // special case for the inner loop when m = 1:\n        // wr = 1 / wi = 0\n        for (i = 1; i <= nn; i += istep) {\n            j = i + mmax;\n            tempr = data[j - 1];\n            tempi = data[j];\n            data[j - 1] = data[i - 1] - tempr;\n            data[j] = data[i] - tempi;\n            data[i - 1] += tempr;\n            data[i] += tempi;\n        }\n\n        wr = 1.0 + wpr;\n        wi = wpi;\n        // ---------------------------------------------\n\n        halfmmax = ((mmax >>> 1) + 1);\n\n        for (m = 3; m < halfmmax; m += 2) {\n            for (i = m; i <= nn; i += istep) {\n                j = i + mmax;\n                tempr = (wr * (dj1 = data[j - 1])) - (wi * (dj = data[j]));\n                tempi = (wr * dj) + (wi * dj1);\n                data[j - 1] = data[i - 1] - tempr;\n                data[j] = data[i] - tempi;\n                data[i - 1] += tempr;\n                data[i] += tempi;\n            }\n            wr += ((tempr = wr) * wpr) - (wi * wpi);\n            wi += (wi * wpr) + (tempr * wpi);\n        }\n\n        // ---------------------------------------------\n        // special case for the inner loop when m = ((mmax >>> 1) + 1):\n        // wr = 0 / wi = isign\n        if (isign === 1) {\n            for (i = m; i <= nn; i += istep) {\n                j = i + mmax;\n                tempr = -data[j];\n                tempi = data[j - 1];\n                data[j - 1] = data[i - 1] - tempr;\n                data[j] = data[i] - tempi;\n                data[i - 1] += tempr;\n                data[i] += tempi;\n            }\n            wr = -wpi;\n            wi = 1.0 + wpr;\n        }\n        else {\n            for (i = m; i <= nn; i += istep) {\n                j = i + mmax;\n                tempr = data[j];\n                tempi = -data[j - 1];\n                data[j - 1] = data[i - 1] - tempr;\n                data[j] = data[i] - tempi;\n                data[i - 1] += tempr;\n                data[i] += tempi;\n            }\n            wr = wpi;\n            wi = -1.0 - wpr;\n        }\n\n        m += 2;\n        // ---------------------------------------------\n\n        for (; m < mmax; m += 2) {\n            for (i = m; i <= nn; i += istep) {\n                j = i + mmax;\n                tempr = (wr * (dj1 = data[j - 1])) - (wi * (dj = data[j]));\n                tempi = (wr * dj) + (wi * dj1);\n                data[j - 1] = data[i - 1] - tempr;\n                data[j] = data[i] - tempi;\n                data[i - 1] += tempr;\n                data[i] += tempi;\n            }\n            wr += ((tempr = wr) * wpr) - (wi * wpi);\n            wi += (wi * wpr) + (tempr * wpi);\n        }\n\n        mmax = istep;\n    }\n}\n\nexport function FFTReal(data: Float32Array, n: number, isign: number) {\n    let i: number;\n    let i1: number;\n    let i2: number;\n    let i3: number;\n    let i4: number;\n    let d1: number;\n    let d2: number;\n    let d3: number;\n    let d4: number;\n    const n4 = n >>> 2;\n    let c2: number;\n    let h1r: number;\n    let h1i: number;\n    let h2r: number;\n    let h2i: number;\n    let wr: number;\n    let wi: number;\n    let wpr: number;\n    let wpi: number;\n    let theta = Math.PI / (n >>> 1);\n\n    if (isign === 1) {\n        c2 = -0.5;\n        FFTComplex(data, n >>> 1, 1);\n    }\n    else {\n        c2 = 0.5;\n        theta = -theta;\n    }\n\n    wpr = Math.sin(0.5 * theta);\n    wr = 1.0 + (wpr *= (-2.0 * wpr));\n    wi = (wpi = Math.sin(theta));\n\n    for (i = 1; i < n4; i++) {\n        i2 = 1 + (i1 = (i << 1));\n        i4 = 1 + (i3 = (n - i1));\n        h1r = 0.5 * ((d1 = data[i1]) + (d3 = data[i3]));\n        h1i = 0.5 * ((d2 = data[i2]) - (d4 = data[i4]));\n        h2r = -c2 * (d2 + d4);\n        h2i = c2 * (d1 - d3);\n        data[i1] = h1r + (d1 = (wr * h2r)) - (d2 = (wi * h2i));\n        data[i2] = h1i + (d3 = (wr * h2i)) + (d4 = (wi * h2r));\n        data[i3] = h1r - d1 + d2;\n        data[i4] = d3 + d4 - h1i;\n        wr += ((h1r = wr) * wpr) - (wi * wpi);\n        wi += (wi * wpr) + (h1r * wpi);\n    }\n\n    if (isign === 1) {\n        data[0] = (h1r = data[0]) + data[1];\n        data[1] = h1r - data[1];\n    }\n    else {\n        data[0] = 0.5 * ((h1r = data[0]) + data[1]);\n        data[1] = 0.5 * (h1r - data[1]);\n        FFTComplex(data, n >>> 1, -1);\n        h1r = 2.0 / n;\n\n        for (i = n - 1; i >= 0; i--) {\n            data[i] *= h1r;\n        }\n    }\n}\n","/**\n * canvas-equalizer is distributed under the FreeBSD License\n *\n * Copyright (c) 2012-2017 Armando Meziat, Carlos Rafael Gimenes das Neves\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, this\n *    list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * The views and conclusions contained in the software and documentation are those\n * of the authors and should not be interpreted as representing official policies,\n * either expressed or implied, of the FreeBSD Project.\n *\n * https://github.com/radiojhero/canvas-equalizer\n */\n\n/* tslint:disable:no-magic-numbers no-bitwise */\n\nimport deepAssign from 'deep-assign';\nimport { FFTReal } from './FFTNR';\nimport IEqualizerOptions from './IEqualizerOptions';\n\nconst defaultOptions: IEqualizerOptions = {\n    validYRangeHeight: 255,\n    visibleBinCount: 512,\n};\n\nexport default class Equalizer {\n\n    private _options: IEqualizerOptions;\n    private _visibleFrequencies: Float32Array;\n    private _equivalentZones: Uint16Array;\n    private _equivalentZonesFrequencyCount: Float32Array;\n    private _zeroChannelValueY: number;\n    public _maximumChannelValue: number;\n    public _minimumChannelValue: number;\n    public _minusInfiniteChannelValue: number;\n    private _maximumChannelValueY: number;\n    private _minimumChannelValueY: number;\n    private _filterLength: number;\n    private _sampleRate: number;\n    private _isNormalized: boolean;\n    public _binCount: number;\n    private _audioContext: AudioContext;\n    private _filterKernel: AudioBuffer;\n    private _convolver: ConvolverNode;\n    private _tmp: Float32Array;\n    private _channelCurves: Int16Array[];\n    private _actualChannelCurve: Int16Array;\n    private _channelIndex: number;\n\n    constructor(filterLength: number, audioContext: AudioContext, options: IEqualizerOptions = {}) {\n        Equalizer._validateFilterLength(filterLength);\n\n        this._options = deepAssign({}, defaultOptions, options);\n        this._filterLength = filterLength;\n        this._sampleRate = audioContext.sampleRate || 44100;\n        this._isNormalized = false;\n        this._binCount = (filterLength >>> 1) + 1;\n        this._audioContext = audioContext;\n        this._filterKernel = audioContext.createBuffer(2, filterLength, this._sampleRate);\n        this._tmp = new Float32Array(filterLength);\n        this._channelCurves = [\n            new Int16Array(this._options.visibleBinCount!), new Int16Array(this._options.visibleBinCount!)];\n        this._actualChannelCurve = new Int16Array(this._options.visibleBinCount!);\n        this._channelIndex = -1;\n\n        this._zeroChannelValueY = this._options.validYRangeHeight! >>> 1;\n        this._maximumChannelValue = this._options.validYRangeHeight! >>> 1;\n        this._minimumChannelValue = -(this._options.validYRangeHeight! >>> 1);\n        this._minusInfiniteChannelValue = -(this._options.validYRangeHeight! >>> 1) - 1;\n        this._maximumChannelValueY = 0;\n        this._minimumChannelValueY = this._options.validYRangeHeight! - 1;\n\n        this._visibleFrequencies = new Float32Array(this._options.visibleBinCount!);\n        this._equivalentZones = new Uint16Array([31, 62, 125, 250, 500, 1000, 2000, 4000, 8000, 16000]);\n\n        /* [0, +9, +9, +18, +35, +36, +70, +72, +72, +72, visibleBinCount] */\n        let eqz = [0, 9, 18, 36, 71, 107, 177, 249, 321, 393, 512];\n        const ratio = this._options.visibleBinCount! / eqz[eqz.length - 1];\n        let freqSteps = [5, 5, 5, 5, 10, 10, 20, 40, 80, 89];\n        const firstFreqs = [5, 50, 95, 185, 360, 720, 1420, 2860, 5740, 11498];\n        let f = firstFreqs[0];\n\n        if (this._options.visibleBinCount! !== eqz[eqz.length - 1]) {\n            eqz = eqz.map((num: number) => Math.round(num * ratio));\n            freqSteps = freqSteps.map((num: number) => num / ratio);\n        }\n\n        this._equivalentZonesFrequencyCount = new Float32Array(eqz);\n\n        for (let i = 0, s = 0; i < this._options.visibleBinCount!; i++) {\n            this._visibleFrequencies[i] = f;\n            if (s !== eqz.length - 1 && s !== firstFreqs.length - 1 && i + 1 >= eqz[s + 1]) {\n                s++;\n                f = firstFreqs[s];\n            }\n            else {\n                f += freqSteps[s];\n            }\n        }\n\n        this.reset();\n        this._convolver = audioContext.createConvolver();\n        this._convolver.normalize = false;\n        this._convolver.buffer = this._filterKernel;\n    }\n\n    public reset() {\n        for (let i = this._options.visibleBinCount! - 1; i >= 0; i--) {\n            this._channelCurves[0][i] = this._zeroChannelValueY;\n            this._channelCurves[1][i] = this._zeroChannelValueY;\n            this._actualChannelCurve[i] = this._zeroChannelValueY;\n        }\n\n        this.updateFilter(true);\n        this.updateActualChannelCurve(0);\n    }\n\n    public clampY(y: number): number {\n        const maxY = this._maximumChannelValueY;\n        const minY = this._minimumChannelValueY;\n\n        return y <= maxY ? maxY : (y > minY ? this._options.validYRangeHeight! + 1 : y);\n    }\n\n    public yToDB(y: number): number {\n        const maxY = this._maximumChannelValueY;\n        const minY = this._minimumChannelValueY;\n\n        return y <= maxY ? 40 : (y > minY ? -Infinity : Equalizer._lerp(maxY, 40, minY, -40, y));\n    }\n\n    public yToMagnitude(y: number): number {\n        // 40dB = 100\n        // -40dB = 0.01\n        // magnitude = 10 ^ (dB/20)\n        // log a (x^p) = p * log a (x)\n        // x^p = a ^ (p * log a (x))\n        // 10^p = e ^ (p * log e (10))\n        const maxY = this._maximumChannelValueY;\n        const minY = this._minimumChannelValueY;\n\n        return y <= maxY ? 100 :\n            (y > minY ? 0 : Math.exp(Equalizer._lerp(maxY, 2, minY, -2, y) * Math.LN10)); // 2 = 40dB/20\n    }\n\n    public magnitudeToY(magnitude: number): number {\n        // 40dB = 100\n        // -40dB = 0.01\n        const zcy = this._zeroChannelValueY;\n\n        return magnitude >= 100\n               ? this._maximumChannelValueY\n               : (magnitude < 0.01\n                  ? this._options.validYRangeHeight! + 1\n                  : Math.round((zcy - (zcy * Math.log(magnitude) / Math.LN10 * 0.5)) - 0.4));\n    }\n\n    public visibleBinToZoneIndex(visibleBinIndex: number): number {\n        if (visibleBinIndex >= (this._options.visibleBinCount! - 1)) {\n            return this._equivalentZones.length - 1;\n        }\n        else if (visibleBinIndex > 0) {\n            const z = this._equivalentZonesFrequencyCount;\n\n            for (let i = z.length - 1; i >= 0; i--) {\n                if (visibleBinIndex >= z[i]) {\n                    return i;\n                }\n            }\n        }\n\n        return 0;\n    }\n\n    public visibleBinToFrequency(visibleBinIndex: number): number {\n        const vf = this._visibleFrequencies;\n        const vbc = this._options.visibleBinCount!;\n\n        if (visibleBinIndex >= vbc - 1) {\n            return vf[vbc - 1];\n        }\n        else if (visibleBinIndex > 0) {\n            return vf[visibleBinIndex];\n        }\n\n        return vf[0];\n    }\n\n    public visibleBinToFrequencyGroup(visibleBinIndex: number): number[] {\n        const ez = this._equivalentZones;\n        const vf = this._visibleFrequencies;\n        const vbc = this._options.visibleBinCount!;\n\n        if (visibleBinIndex >= vbc - 1) {\n            return [Math.round(vf[vbc - 1]), Math.round(ez[ez.length - 1])];\n        }\n        else if (visibleBinIndex > 0) {\n            const ezc = this._equivalentZonesFrequencyCount;\n\n            for (let i = ezc.length - 1; i >= 0; i--) {\n                if (visibleBinIndex >= ezc[i]) {\n                    return [Math.round(vf[visibleBinIndex]), Math.round(ez[i])];\n                }\n            }\n        }\n\n        return [Math.round(vf[0]), Math.round(ez[0])];\n    }\n\n    public changeZoneY(channelIndex: number, x: number, y: number) {\n        let i = this.visibleBinToZoneIndex(x);\n        const ii = this._equivalentZonesFrequencyCount[i + 1];\n        const cy = this.clampY(y);\n        const curve = this._channelCurves[channelIndex];\n\n        for (i = this._equivalentZonesFrequencyCount[i]; i < ii; i++) {\n            curve[i] = cy;\n        }\n    }\n\n    private _updateBuffer() {\n        if (this._options.convolverCallback) {\n            const oldConvolver = this._convolver;\n            this._convolver = this.audioContext.createConvolver();\n            this._convolver.normalize = false;\n            this._convolver.buffer = this._filterKernel;\n            this._options.convolverCallback(oldConvolver, this._convolver);\n        } else {\n            this._convolver.buffer = this._filterKernel;\n        }\n    }\n\n    public copyFilter(sourceChannel: number, destinationChannel: number) {\n        const src = this._filterKernel.getChannelData(sourceChannel);\n        const dst = this._filterKernel.getChannelData(destinationChannel);\n\n        for (let i = (this._filterLength - 1); i >= 0; i--) {\n            dst[i] = src[i];\n        }\n\n        if (this._convolver) {\n            this._updateBuffer();\n        }\n    }\n\n    public updateFilter(updateBothChannels: boolean) {\n        const channelIndex = Math.max(this._channelIndex, 0);\n        const isSameFilterLR = channelIndex === -1;\n        const filterLength = this._filterLength;\n        const curve = this._channelCurves[channelIndex];\n        const valueCount = this._options.visibleBinCount!;\n        const bw = this._sampleRate / filterLength;\n        const filterLength2 = (filterLength >>> 1);\n        const filter = this._filterKernel.getChannelData(channelIndex);\n        const _visibleFrequencies = this._visibleFrequencies;\n        /* M = filterLength2, so, M_HALF_PI_FFTLEN2 = (filterLength2 * 0.5 * Math.PI) / filterLength2 */\n        const M_HALF_PI_FFTLEN2 = 0.5 * Math.PI;\n        let invMaxMag = 1;\n        let repeat = Number(this._isNormalized) + 1;\n\n        // fill in all filter points, either averaging or interpolating them as necessary\n        do {\n            repeat--;\n            let i = 1;\n            let ii = 0;\n\n            // tslint:disable-next-line:no-constant-condition\n            while (true) {\n                const freq = bw * i;\n\n                if (freq >= _visibleFrequencies[0]) {\n                    break;\n                }\n\n                const mag = this.yToMagnitude(curve[0]);\n                filter[i << 1] = mag * invMaxMag;\n                i++;\n            }\n\n            while (bw > _visibleFrequencies[ii + 1] - _visibleFrequencies[ii] &&\n                   i < filterLength2 && ii < valueCount - 1) {\n                const freq = bw * i;\n                let avg = 0;\n                let avgCount = 0;\n\n                do {\n                    avg += curve[ii];\n                    avgCount++;\n                    ii++;\n                } while (freq > _visibleFrequencies[ii] && ii < valueCount - 1);\n\n                const mag = this.yToMagnitude(avg / avgCount);\n                filter[i << 1] = mag * invMaxMag;\n                i++;\n            }\n\n            for (; i < filterLength2; i++) {\n                const freq = bw * i;\n                let mag: number;\n\n                if (freq >= _visibleFrequencies[valueCount - 1]) {\n                    mag = this.yToMagnitude(curve[valueCount - 1]);\n                }\n                else {\n                    while (ii < (valueCount - 1) && freq > _visibleFrequencies[ii + 1]) {\n                        ii++;\n                    }\n\n                    mag = this.yToMagnitude(\n                        Equalizer._lerp(_visibleFrequencies[ii], curve[ii],\n                                       _visibleFrequencies[ii + 1], curve[ii + 1], freq));\n                }\n                filter[i << 1] = mag * invMaxMag;\n            }\n            // since DC and Nyquist are purely real, do not bother with them in the for loop,\n            // just make sure neither one has a gain greater than 0 dB\n            filter[0] = (filter[2] >= 1 ? 1 : filter[2]);\n            filter[1] = (filter[filterLength - 2] >= 1 ? 1 : filter[filterLength - 2]);\n\n            // convert the coordinates from polar to rectangular\n            for (i = filterLength - 2; i >= 2; i -= 2) {\n                /*                -k.j\n                 * polar = Mag . e\n                 *\n                 * where:\n                 * k = (M / 2) * pi * i / (fft length / 2)\n                 * i = index varying from 0 to (fft length / 2)\n                 *\n                 * rectangular:\n                 * real = Mag . cos(-k)\n                 * imag = Mag . sin(-k)\n                 */\n                const k = M_HALF_PI_FFTLEN2 * (i >>> 1);\n                /* ****NOTE:\n                 * when using FFTReal ou FFTNR, k MUST BE passed as the argument of sin and cos, due to the\n                 * signal of the imaginary component\n                 * RFFT, intel and other fft's use the opposite signal... therefore, -k MUST BE passed!!\n                 */\n                filter[i + 1] = (filter[i] * Math.sin(k));\n                filter[i] *= Math.cos(k);\n            }\n\n            FFTReal(filter, filterLength, -1);\n\n            if (repeat) {\n                // get the actual filter response, and then, compensate\n                invMaxMag = this._applyWindowAndComputeActualMagnitudes(filter);\n\n                if (invMaxMag <= 0) {\n                    repeat = 0;\n                }\n\n                invMaxMag = 1.0 / invMaxMag;\n            }\n        } while (repeat);\n\n        if (isSameFilterLR) {\n            // copy the filter to the other channel\n            this.copyFilter(channelIndex, 1 - channelIndex);\n            return;\n        }\n\n        if (updateBothChannels) {\n            // update the other channel as well\n            const oldChannelIndex = this._channelIndex;\n\n            this._channelIndex = 1 - channelIndex;\n            this.updateFilter(false);\n            this._channelIndex = oldChannelIndex;\n            return;\n        }\n\n        if (this._convolver) {\n            this._updateBuffer();\n        }\n    }\n\n    public updateActualChannelCurve(channelIndex: number) {\n        const filterLength = this._filterLength;\n        const curve = this._actualChannelCurve;\n        const valueCount = this._options.visibleBinCount!;\n        const bw = this._sampleRate / filterLength;\n        const filterLength2 = (filterLength >>> 1);\n        const tmp = this._tmp;\n        const _visibleFrequencies = this._visibleFrequencies;\n        const filter = this._filterKernel.getChannelData(channelIndex);\n\n        this._applyWindowAndComputeActualMagnitudes(filter);\n\n        // tmp now contains (filterLength2 + 1) magnitudes\n        let i = 0;\n        let ii = 0;\n\n        while (ii < valueCount - 1 && i < filterLength2 && bw > _visibleFrequencies[ii + 1] - _visibleFrequencies[ii]) {\n            let freq = bw * i;\n\n            while (i < filterLength2 && freq + bw < _visibleFrequencies[ii]) {\n                i++;\n                freq = bw * i;\n            }\n\n            curve[ii] = this.magnitudeToY(\n                Equalizer._lerp(freq, tmp[i], freq + bw, tmp[i + 1], _visibleFrequencies[ii]));\n            ii++;\n        }\n\n        i++;\n\n        while (i < filterLength2 && ii < valueCount) {\n            let freq: number;\n            let avg = 0;\n            let avgCount = 0;\n\n            do {\n                avg += tmp[i];\n                avgCount++;\n                i++;\n                freq = bw * i;\n            } while (freq < _visibleFrequencies[ii] && i < filterLength2);\n\n            curve[ii] = this.magnitudeToY(avg / avgCount);\n            ii++;\n        }\n\n        i = (this._sampleRate >>> 1) >= _visibleFrequencies[valueCount - 1]\n            ? curve[ii - 1]\n            : this._options.validYRangeHeight! + 1;\n\n        for (; ii < valueCount; ii++) {\n            curve[ii] = i;\n        }\n    }\n\n    private _applyWindowAndComputeActualMagnitudes(filter: Float32Array): number {\n        const filterLength = this._filterLength;\n        const tmp = this._tmp;\n        const filterLength2 = (filterLength >>> 1);\n        const M = filterLength2;\n        const PI2_M = 2 * Math.PI / M;\n\n        // it is not possible to know what kind of window the browser will use,\n        // so make an assumption here... Blackman window!\n        // ...at least it is the one I used, back in C++ times :)\n        for (let i = M; i >= 0; i--) {\n            /* Hanning window */\n            // tmp[i] = filter[i] * (0.5 - (0.5 * cos(PI2_M * i)));\n            /* Hamming window */\n            // tmp[i] = filter[i] * (0.54 - (0.46 * cos(PI2_M * i)));\n            /* Blackman window */\n            tmp[i] = filter[i] * (0.42 - (0.5 * Math.cos(PI2_M * i)) + (0.08 * Math.cos(2 * PI2_M * i)));\n        }\n\n        for (let i = filterLength - 1; i > M; i--) {\n            tmp[i] = 0;\n        }\n\n        // calculate the spectrum\n        FFTReal(tmp, filterLength, 1);\n        // save Nyquist for later\n        const ii = tmp[1];\n        let maxMag = (tmp[0] > ii ? tmp[0] : ii);\n\n        for (let i = 2; i < filterLength; i += 2) {\n            const rval = tmp[i];\n            const ival = tmp[i + 1];\n            const mag = Math.sqrt((rval * rval) + (ival * ival));\n\n            tmp[i >>> 1] = mag;\n            if (mag > maxMag) {\n                maxMag = mag;\n            }\n        }\n\n        // restore Nyquist in its new position\n        tmp[filterLength2] = ii;\n        return maxMag;\n    }\n\n    private static _validateFilterLength(filterLength: number) {\n        if (filterLength < 8 || (filterLength & (filterLength - 1))) {\n            throw new Error('The FFT size must be power of 2 and not less than 8.');\n        }\n    }\n\n    private static _lerp(x0: number, y0: number, x1: number, y1: number, x: number): number {\n        return ((x - x0) * (y1 - y0) / (x1 - x0)) + y0;\n    }\n\n    // virtual properties\n\n    get filterLength(): number {\n        return this._filterLength;\n    }\n\n    set filterLength(newFilterLength: number) {\n        if (this._filterLength !== newFilterLength) {\n            Equalizer._validateFilterLength(newFilterLength);\n            this._filterLength = newFilterLength;\n            this._binCount = (newFilterLength >>> 1) + 1;\n            this._filterKernel = this._audioContext.createBuffer(2, newFilterLength, this._sampleRate);\n            this._tmp = new Float32Array(newFilterLength);\n            this.updateFilter(true);\n        }\n    }\n\n    get sampleRate(): number {\n        return this._sampleRate;\n    }\n\n    set sampleRate(newSampleRate: number) {\n        if (this.sampleRate !== newSampleRate) {\n            this._sampleRate = newSampleRate;\n            this._filterKernel = this._audioContext.createBuffer(2, this._filterLength, newSampleRate);\n            this.updateFilter(true);\n        }\n    }\n\n    get isNormalized(): boolean {\n        return this._isNormalized;\n    }\n\n    set isNormalized(isNormalized: boolean) {\n        if (this.isNormalized !== isNormalized) {\n            this._isNormalized = isNormalized;\n            this.updateFilter(true);\n        }\n    }\n\n    get audioContext(): AudioContext {\n        return this._audioContext;\n    }\n\n    set audioContext(newAudioContext: AudioContext) {\n        if (this.audioContext !== newAudioContext) {\n            const oldConvolver = this._convolver;\n            this._convolver.disconnect(0);\n            this._audioContext = newAudioContext;\n            this._filterKernel = newAudioContext.createBuffer(2, this._filterLength, this._sampleRate);\n            (this._convolver as any) = null;\n            this.updateFilter(true);\n            this._convolver = newAudioContext.createConvolver();\n            this._convolver.normalize = false;\n            this._convolver.buffer = this._filterKernel;\n            if (this._options.convolverCallback) {\n                this._options.convolverCallback(oldConvolver, this._convolver);\n            }\n        }\n    }\n\n    get options(): IEqualizerOptions {\n        return deepAssign({}, defaultOptions, this._options);\n    }\n\n    get visibleFrequencies(): Float32Array {\n        return this._visibleFrequencies;\n    }\n\n    get channelCurves(): Int16Array[] {\n        return this._channelCurves.slice();\n    }\n\n    get actualChannelCurve(): Int16Array {\n        return this._actualChannelCurve;\n    }\n\n    get convolver(): ConvolverNode {\n        return this._convolver;\n    }\n\n    get channelIndex(): number {\n        return this._channelIndex;\n    }\n\n    get zeroChannelValueY(): number {\n        return this._zeroChannelValueY;\n    }\n\n    get equivalentZonesFrequencyCount(): Float32Array {\n        return this._equivalentZonesFrequencyCount;\n    }\n\n    set channelIndex(newChannelIndex: number) {\n        this._channelIndex = newChannelIndex;\n    }\n}\n","/**\n * canvas-equalizer is distributed under the FreeBSD License\n *\n * Copyright (c) 2012-2017 Armando Meziat, Carlos Rafael Gimenes das Neves\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, this\n *    list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * The views and conclusions contained in the software and documentation are those\n * of the authors and should not be interpreted as representing official policies,\n * either expressed or implied, of the FreeBSD Project.\n *\n * https://github.com/radiojhero/canvas-equalizer\n */\n\nimport defaultLocale from '../locales/en.json';\n\nimport ILocale from './ILocale';\n\ninterface ILocaleSet {\n    [langId: string]: ILocale;\n}\n\nconst defaultLanguage = 'en';\n\nexport default class L10n {\n\n    private _language: string;\n    private _locales: ILocaleSet = {};\n\n    constructor(language: string = defaultLanguage) {\n        this._language = language;\n        this.loadLocale(defaultLanguage, defaultLocale);\n    }\n\n    public loadLocale(language: string, locale: ILocale) {\n        this._locales[language] = locale;\n    }\n\n    public get(tag: string) {\n        let locales = this._locales[this._language] || this._locales[defaultLanguage];\n\n        if (locales[tag] === undefined) {\n            locales = this._locales[defaultLanguage];\n        }\n\n        return locales[tag];\n    }\n\n    public format(str: string, ...args: any[]): string {\n        str = this.get(str);\n        args.forEach((arg: any, i: number) => {\n            str = str.replace(new RegExp(`\\\\{${i}\\\\}`, 'g'), arg.toLocaleString(this._language));\n        });\n\n        return str;\n    }\n\n    get language(): string {\n        return this._language;\n    }\n\n    set language(language: string) {\n        this._language = language;\n    }\n}\n","/**\n * canvas-equalizer is distributed under the FreeBSD License\n *\n * Copyright (c) 2012-2017 Armando Meziat, Carlos Rafael Gimenes das Neves\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, this\n *    list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * The views and conclusions contained in the software and documentation are those\n * of the authors and should not be interpreted as representing official policies,\n * either expressed or implied, of the FreeBSD Project.\n *\n * https://github.com/radiojhero/canvas-equalizer\n */\n\nimport deepAssign from 'deep-assign';\n\nimport {\n    keyPressed,\n    elemCoords,\n    attachPointer, detachPointer, cancelEvent,\n    throttledFunction, addThrottledEvent, removeThrottledEvent,\n} from './Common';\n\nimport Equalizer from './Equalizer';\nimport L10n from './L10n';\n\nimport ICanvasEqualizerOptions from './ICanvasEqualizerOptions';\nimport ILocale from './ILocale';\n\nconst defaultOptions: ICanvasEqualizerOptions = {\n    classNamespace: 'GE',\n    filterOptions: {},\n    updateFilterOnDrag: true,\n};\n\nexport default class CanvasEqualizer {\n\n    private _options: ICanvasEqualizerOptions;\n    private _filter: Equalizer;\n    private _element: HTMLElement;\n    private _canvas: HTMLCanvasElement;\n    private _ctx: CanvasRenderingContext2D;\n    private _rangeImage: CanvasGradient;\n    private _btnMnu: HTMLButtonElement;\n    private _mnu: HTMLElement;\n    private _mnuChBL: HTMLButtonElement;\n    private _mnuChL: HTMLButtonElement;\n    private _mnuChBR: HTMLButtonElement;\n    private _mnuChR: HTMLButtonElement;\n    private _mnuShowZones: HTMLButtonElement;\n    private _mnuEditZones: HTMLButtonElement;\n    private _mnuNormalizeCurves: HTMLButtonElement;\n    private _mnuShowActual: HTMLButtonElement;\n    private _lblCursor: HTMLElement;\n    private _lblCurve: HTMLElement;\n    private _lblFrequency: HTMLElement;\n    private _stb: HTMLElement;\n    private _showZones = false;\n    private _editZones = false;\n    private _isActualChannelCurveNeeded = true;\n    private _currentChannelIndex = 0;\n    private _isSameFilterLR = true;\n    private _drawingMode = 0;\n    private _lastDrawX = 0;\n    private _lastDrawY = 0;\n    private _barHideTimeout: number;\n    private _l10n: L10n;\n    private _isRTL = false;\n\n    constructor(filterLength: number, audioContext: AudioContext, options: ICanvasEqualizerOptions = {}) {\n        this._options = deepAssign({}, defaultOptions, options);\n        this._filter = new Equalizer(filterLength, audioContext, this._options.filterOptions);\n        this._l10n = new L10n(this._options.language);\n    }\n\n    public createControl(placeholder: HTMLElement): HTMLCanvasElement {\n        if (!this._ctx) {\n            const createLabel = (name: string, content: string) => {\n                const lbl = document.createElement('div');\n                lbl.className = `${clsNS}LBL ${clsNS}LBL${name}`;\n                lbl.innerHTML = this._l10n.get(content);\n                return lbl;\n            };\n            const createMenuSep = () => {\n                const s = document.createElement('div');\n                s.className = `${clsNS}MNUSEP`;\n                s.setAttribute('role', 'separator');\n                return s;\n            };\n            const createMenuLabel = (text: string) => {\n                const l = document.createElement('div');\n                l.className = `${clsNS}MNULBL`;\n                l.textContent = this._l10n.get(text);\n                return l;\n            };\n            const createMenuItem = (text: string, checkable: boolean | string, checked: boolean,\n                                    clickHandler: (e: MouseEvent) => any) => {\n                const i = document.createElement('button');\n                i.type = 'button';\n                i.className = `${clsNS}MNUIT ${clsNS}CLK`;\n\n                if (checkable) {\n                    if (typeof checkable === 'string') {\n                        i.dataset['radioGroup'] = checkable;\n                        i.setAttribute('role', 'menuitemradio');\n                    }\n                    else {\n                        i.setAttribute('role', 'menuitemcheckbox');\n                    }\n\n                    const s = document.createElement('span');\n                    s.textContent = typeof checkable === 'string' ? '● ' : '■ ';\n                    i.appendChild(s);\n                    this._checkMenu(i, checked);\n                }\n                else {\n                    i.setAttribute('role', 'menuitem');\n                }\n\n                i.appendChild(document.createTextNode(this._l10n.get(text)));\n\n                if (clickHandler) {\n                    i.addEventListener('click', clickHandler);\n                }\n\n                i.addEventListener('mouseenter', () => {\n                    i.focus();\n                });\n                i.addEventListener('mouseleave', () => {\n                    i.blur();\n                });\n\n                return i;\n            };\n            const clsNS = this._options.classNamespace!;\n\n            this._element = placeholder;\n            placeholder.className = clsNS;\n\n            if (/\\bip(?:[ao]d|hone)\\b/i.test(navigator.userAgent) && !(window as any).MSStream) {\n                placeholder.classList.add(`${clsNS}IOS`);\n            }\n\n            if (getComputedStyle(placeholder).direction === 'rtl') {\n                placeholder.classList.add('RTL');\n                this._isRTL = true;\n            }\n\n            placeholder.addEventListener('contextmenu', cancelEvent);\n\n            this._stb = document.createElement('div');\n            this._stb.className = `${clsNS}STB`;\n            placeholder.appendChild(this._stb);\n\n            this._canvas = document.createElement('canvas');\n            this._canvas.className = `${clsNS}CNV`;\n            attachPointer(this._canvas, 'down', this._canvasMouseDown);\n            attachPointer(this._canvas, 'move', this._canvasMouseMove);\n            attachPointer(this._canvas, 'up', this._canvasMouseUp);\n            this._canvas.addEventListener('contextmenu', cancelEvent);\n            placeholder.appendChild(this._canvas);\n            addThrottledEvent(window, 'resize', this._windowResize);\n\n            const ctx = this._canvas.getContext('2d');\n\n            if (!ctx) {\n                throw new Error('Unable to get a 2D context.');\n            }\n\n            this._ctx = ctx;\n\n            this._stb.appendChild(this._lblCursor = createLabel('CSR', 'cursor.label'));\n            this._stb.appendChild(this._lblCurve = createLabel('CRV', 'curve.label'));\n            this._stb.appendChild(this._lblFrequency = createLabel('FRQ', 'frequency.label'));\n            this._setStatusBar(0, this._filter.zeroChannelValueY, this._filter.zeroChannelValueY);\n\n            this._btnMnu = document.createElement('button');\n            this._btnMnu.type = 'button';\n            this._btnMnu.className = `${clsNS}BTN ${clsNS}CLK`;\n            this._btnMnu.setAttribute('aria-haspopup', 'true');\n            this._btnMnu.setAttribute('aria-label', this._l10n.get('menu'));\n            this._btnMnu.addEventListener('click', this._btnMnuClick);\n            this._btnMnu.addEventListener('keydown', this._btnMnuKeyDown);\n            this._btnMnu.addEventListener('mouseenter', () => {\n                this._btnMnu.focus();\n            });\n            this._btnMnu.addEventListener('mouseleave', () => {\n                this._btnMnu.blur();\n            });\n            this._stb.appendChild(this._btnMnu);\n\n            this._mnu = document.createElement('div');\n            this._mnu.className = `${clsNS}MNU`;\n            this._mnu.setAttribute('role', 'menu');\n            this._mnu.addEventListener('keydown', this._mnuKeyDown);\n            this._mnu.appendChild(createMenuLabel('menu.both'));\n            this._mnu.appendChild(this._mnuChBL =\n                createMenuItem('menu.both.left', 'curve', true, this._mnuChBLClick));\n            this._mnu.appendChild(this._mnuChBR =\n                createMenuItem('menu.both.right', 'curve', false, this._mnuChBRClick));\n            this._mnu.appendChild(createMenuSep());\n            this._mnu.appendChild(createMenuLabel('menu.one'));\n            this._mnu.appendChild(this._mnuChL =\n                createMenuItem('menu.one.left', 'curve', false, this._mnuChLClick));\n            this._mnu.appendChild(this._mnuChR =\n                createMenuItem('menu.one.right', 'curve', false, this._mnuChRClick));\n            this._mnu.appendChild(createMenuSep());\n            this._mnu.appendChild(this._mnuShowZones =\n                createMenuItem('menu.zones', true, false, this._mnuShowZonesClick));\n            this._mnu.appendChild(this._mnuEditZones =\n                createMenuItem('menu.zoneEdit', true, false, this._mnuEditZonesClick));\n            this._mnu.appendChild(createMenuSep());\n            this._mnu.appendChild(this._mnuNormalizeCurves =\n                createMenuItem('menu.normalizeCurves', true, false, this._mnuNormalizeCurvesClick));\n            this._mnu.appendChild(this._mnuShowActual =\n                createMenuItem('menu.actualResponse', true, true, this._mnuShowActualClick));\n            this._stb.appendChild(this._mnu);\n            this._toggleMenu(false);\n\n            this._fixCanvasSize();\n            this._drawCurve();\n        }\n        return this._canvas;\n    }\n\n    public destroyControl() {\n        if (this._ctx) {\n            removeThrottledEvent(window, 'resize', this._windowResize);\n            delete this._canvas;\n            delete this._lblCursor;\n            delete this._lblCurve;\n            delete this._lblFrequency;\n            delete this._btnMnu;\n            delete this._mnu;\n            delete this._mnuChBL;\n            delete this._mnuChL;\n            delete this._mnuChBR;\n            delete this._mnuChR;\n            delete this._mnuShowZones;\n            delete this._mnuEditZones;\n            delete this._mnuNormalizeCurves;\n            delete this._mnuShowActual;\n            delete this._stb;\n            delete this._ctx;\n            delete this._rangeImage;\n            this._element.innerHTML = '';\n            delete this._element;\n            clearTimeout(this._barHideTimeout);\n        }\n    }\n\n    public reset() {\n        this._filter.reset();\n        this._drawCurve();\n    }\n\n    public loadLocale(language: string, locale: ILocale) {\n        this._l10n.loadLocale(language, locale);\n    }\n\n    /* tslint:disable:no-magic-numbers */\n    private _formatDB(dB: number): string {\n        if (dB < -40) {\n            dB = -Infinity;\n        }\n\n        const ret = dB.toLocaleString(this._l10n.language, { minimumFractionDigits: 2, maximumFractionDigits: 2 });\n        return dB < 0 ? ret.replace('-', '−') : (dB === 0 ? '−' + ret : '+' + ret);\n    }\n\n    private _formatFrequencyUnit = (frequency: number, compact: boolean): string => {\n        let unit = 'Hz';\n\n        if (compact) {\n            if (frequency >= 1000) {\n                unit = 'k' + unit;\n                frequency = frequency / 1000;\n            }\n        }\n\n        return this._l10n.format('frequency.format', frequency, this._l10n.get(`frequency.unit.${unit}`));\n    }\n\n    private _formatFrequency(frequencyAndEquivalent: number[]): string {\n        return this._l10n.format('frequency.text',\n            ...frequencyAndEquivalent.map((frequency: number, i: number) => this._formatFrequencyUnit(frequency, !!i)));\n    }\n    /* tslint:enable:no-magic-numbers */\n\n    private _checkMenu(mnu: HTMLButtonElement, chk: boolean) {\n\n        function inner(elem: HTMLElement, toggle: boolean) {\n            if (elem) {\n                elem.style.visibility = toggle ? 'visible' : 'hidden';\n                elem.setAttribute('aria-checked', toggle.toString());\n            }\n        }\n\n        if (chk && mnu.dataset['radioGroup']) {\n            [].slice.call(this._mnu.querySelectorAll(`[data-radio-group=\"${mnu.dataset['radioGroup']}\"]`))\n                .forEach((elem: HTMLButtonElement) => {\n                    inner(elem.firstChild as HTMLElement, false);\n                });\n        }\n\n        inner(mnu.firstChild as HTMLElement, chk);\n    }\n\n    private _drawCurve() {\n        /* tslint:disable:no-magic-numbers */\n        // all the 0.5's here are because of this explanation:\n        // http://stackoverflow.com/questions/195262/can-i-turn-off-antialiasing-on-an-html-canvas-element\n        // \"Draw your 1-pixel lines on coordinates like ctx.lineTo(10.5, 10.5). Drawing a one-pixel line\n        // over the point (10, 10) means, that this 1 pixel at that position reaches from 9.5 to 10.5 which\n        // results in two lines that get drawn on the canvas.\n        function pixelRound(x: number): number {\n            return Math.round(x) + middleOffset;\n        }\n\n        const ctx = this._ctx;\n        const canvas = this._canvas;\n        const pixelRatio = window.devicePixelRatio;\n        const width = canvas.width / pixelRatio;\n        const height = canvas.height / pixelRatio;\n        const widthRatio = this._widthRatio();\n        const heightRatio = this._heightRatio();\n        const widthMinus1 = this._filter.options.visibleBinCount! - 1;\n        const middleOffset = 0.5;\n        let curve = this._filter.channelCurves[this._currentChannelIndex];\n\n        if (!ctx) {\n            return false;\n        }\n\n        ctx.fillStyle = '#303030';\n        ctx.fillRect(0, 0, width, height);\n        ctx.lineWidth = 1;\n        ctx.strokeStyle = '#5a5a5a';\n        ctx.beginPath();\n        let x = width + 1 + middleOffset;\n        let y = pixelRound(this._filter.zeroChannelValueY * heightRatio);\n        ctx.moveTo(x, y);\n\n        while (x > 0) {\n            ctx.lineTo(x - 4, y);\n            x -= 10;\n            ctx.moveTo(x, y);\n        }\n\n        ctx.stroke();\n        ctx.font = 'bold 10pt Verdana';\n        ctx.textAlign = this._isRTL ? 'left' : 'right';\n        ctx.fillStyle = '#5a5a5a';\n        ctx.fillText('\\u200e−0dB', this._isRTL ? 1 : width - 1,\n            Math.round(this._filter.zeroChannelValueY * heightRatio) - 2);\n        ctx.beginPath();\n        x = width - 1 - middleOffset;\n        y = pixelRound(this._filter.options.validYRangeHeight! * heightRatio);\n        ctx.moveTo(x, y);\n\n        while (x > 0) {\n            ctx.lineTo(x - 4, y);\n            x -= 10;\n            ctx.moveTo(x, y);\n        }\n\n        ctx.stroke();\n        ctx.fillText('\\u200e−∞dB', this._isRTL ? 1 : width - 1,\n            Math.round(this._filter.options.validYRangeHeight! * heightRatio) - 2);\n\n        if (this._showZones) {\n            for (let i = this._filter.equivalentZonesFrequencyCount.length - 2; i > 0; i--) {\n                x = pixelRound(this._filter.equivalentZonesFrequencyCount[i] * widthRatio);\n                y = 0;\n                ctx.beginPath();\n                ctx.moveTo(x, y);\n\n                while (y < height) {\n                    ctx.lineTo(x, y + 4);\n                    y += 10;\n                    ctx.moveTo(x, y);\n                }\n\n                ctx.stroke();\n            }\n        }\n\n        ctx.strokeStyle = this._isActualChannelCurveNeeded && !this._drawingMode ? '#707070' : this._rangeImage;\n        ctx.beginPath();\n        ctx.moveTo(0.5, pixelRound(curve[0] * heightRatio));\n\n        for (x = 1; x < widthMinus1; x++) {\n            ctx.lineTo(pixelRound(x * widthRatio), pixelRound(curve[x] * heightRatio));\n        }\n\n        // just to fill up the last pixel!\n        ctx.lineTo(Math.round(x * widthRatio) + 1, pixelRound(curve[x] * heightRatio));\n        ctx.stroke();\n\n        if (this._isActualChannelCurveNeeded && !this._drawingMode) {\n            curve = this._filter.actualChannelCurve;\n            ctx.strokeStyle = this._rangeImage;\n            ctx.beginPath();\n            ctx.moveTo(middleOffset, pixelRound(curve[0] * heightRatio));\n\n            for (x = 1; x < widthMinus1; x++) {\n                ctx.lineTo(pixelRound(x * widthRatio),\n                    pixelRound(curve[x] * heightRatio));\n            }\n\n            // just to fill up the last pixel!\n            ctx.lineTo(Math.round(x * widthRatio) + 1, pixelRound(curve[x] * heightRatio));\n            ctx.stroke();\n        }\n\n        return true;\n        /* tslint:enable:no-magic-numbers */\n    }\n\n    private _widthRatio(): number {\n        return this._canvas.width / window.devicePixelRatio / this._filter.options.visibleBinCount!;\n    }\n\n    private _heightRatio(): number {\n        const height = this._stb.clientHeight;\n        // tslint:disable-next-line:no-magic-numbers\n        return (this._canvas.height / window.devicePixelRatio - height - 5) / this._filter.options.validYRangeHeight!;\n    }\n\n    private _fixCanvasSize() {\n        this._canvas.style.display = 'none';\n        const rect = this._element.getBoundingClientRect();\n        const pixelRatio = window.devicePixelRatio;\n        this._canvas.style.display = '';\n        this._canvas.style.width = rect.width + 'px';\n        this._canvas.style.height = rect.height + 'px';\n        this._canvas.width = rect.width * pixelRatio;\n        this._canvas.height = rect.height * pixelRatio;\n\n        this._ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n\n        /* tslint:disable:no-magic-numbers */\n        this._rangeImage = this._ctx.createLinearGradient(0, 0, 0, rect.height - this._stb.clientHeight - 5);\n        this._rangeImage.addColorStop(0, '#ff0000');\n        this._rangeImage.addColorStop(0.1875, '#ffff00');\n        this._rangeImage.addColorStop(0.39453125, '#00ff00');\n        this._rangeImage.addColorStop(0.60546875, '#00ffff');\n        this._rangeImage.addColorStop(0.796875, '#0000ff');\n        this._rangeImage.addColorStop(1, '#ff00ff');\n        /* tslint:enable:no-magic-numbers */\n\n        this._drawCurve();\n    }\n\n    private _wrappedUpdateFilter = () => {\n        this._filter.updateFilter(false);\n    }\n\n    private _setLabelParam(label: HTMLElement, text: string) {\n        const span = label.querySelector('span');\n\n        if (span) {\n            span.textContent = text;\n        }\n    }\n\n    private _setStatusBar(x: number, y: number, curveY: number) {\n        this._setLabelParam(this._lblCursor, this._formatDB(this._filter.yToDB(y)));\n        this._setLabelParam(this._lblCurve, this._formatDB(this._filter.yToDB(curveY)));\n        this._setLabelParam(this._lblFrequency, this._formatFrequency(this._filter.visibleBinToFrequencyGroup(x)));\n    }\n\n    private _toggleMenu(toggle?: boolean) {\n        toggle = toggle === undefined ? this._mnu.style.display === 'none' : toggle;\n\n        this._mnu.style.display = toggle ? '' : 'none';\n        this._btnMnu.textContent = toggle ? '▼' : '▲';\n    }\n\n    // events\n\n    private _btnMnuClick = (e: MouseEvent) => {\n        if (!e.button) {\n            this._toggleMenu();\n        }\n    }\n\n    private _mnuChBLClick = (e: MouseEvent) => {\n        this._mnuChBClick(e, 0);\n    }\n\n    private _mnuChBRClick = (e: MouseEvent) => {\n        this._mnuChBClick(e, 1);\n    }\n\n    private _mnuChBClick = (e: MouseEvent, channelIndex: number) => {\n        if (!e.button) {\n            if (!this._isSameFilterLR || this._currentChannelIndex !== channelIndex) {\n                if (this._isSameFilterLR) {\n                    this._currentChannelIndex = channelIndex;\n                    this._filter.channelIndex = -1;\n                    this._filter.updateFilter(true);\n\n                    if (this._isActualChannelCurveNeeded) {\n                        this._filter.updateActualChannelCurve(channelIndex);\n                    }\n\n                    this._drawCurve();\n                }\n                else {\n                    this._isSameFilterLR = true;\n                    this._filter.copyFilter(channelIndex, 1 - channelIndex);\n                    if (this._currentChannelIndex !== channelIndex) {\n                        this._currentChannelIndex = channelIndex;\n\n                        if (this._isActualChannelCurveNeeded) {\n                            this._filter.updateActualChannelCurve(channelIndex);\n                        }\n\n                        this._drawCurve();\n                    }\n                }\n\n                this._checkMenu(this._mnuChBL, channelIndex === 0);\n                this._checkMenu(this._mnuChBR, channelIndex === 1);\n            }\n        }\n    }\n\n    private _mnuChLClick = (e: MouseEvent) => {\n        this._mnuChLRClick(e, 0);\n    }\n\n    private _mnuChRClick = (e: MouseEvent) => {\n        this._mnuChLRClick(e, 1);\n    }\n\n    private _mnuChLRClick = (e: MouseEvent, channelIndex: number) => {\n        if (!e.button) {\n            if (this._isSameFilterLR || this._currentChannelIndex !== channelIndex) {\n                if (this._isSameFilterLR) {\n                    this._isSameFilterLR = false;\n                    this._filter.channelIndex = 1 - this._currentChannelIndex;\n                    this._filter.updateFilter(false);\n                }\n\n                if (this._currentChannelIndex !== channelIndex) {\n                    this._currentChannelIndex = channelIndex;\n\n                    if (this._isActualChannelCurveNeeded) {\n                        this._filter.updateActualChannelCurve(channelIndex);\n                    }\n\n                    this._drawCurve();\n                }\n\n                this._checkMenu(this._mnuChL, channelIndex === 0);\n                this._checkMenu(this._mnuChR, channelIndex === 1);\n            }\n        }\n    }\n\n    private _mnuShowZonesClick = (e: MouseEvent) => {\n        if (!e.button) {\n            this._showZones = !this._showZones;\n            this._checkMenu(this._mnuShowZones, this._showZones);\n            this._drawCurve();\n        }\n    }\n\n    private _mnuEditZonesClick = (e: MouseEvent) => {\n        if (!e.button) {\n            this._editZones = !this._editZones;\n            this._canvas.classList[this._editZones ? 'add' : 'remove'](`${this._options.classNamespace}CNVZON`);\n            this._checkMenu(this._mnuEditZones, this._editZones);\n        }\n    }\n\n    private _mnuNormalizeCurvesClick = (e: MouseEvent) => {\n        if (!e.button) {\n            this._filter.isNormalized = !this._filter.isNormalized;\n            this._checkMenu(this._mnuNormalizeCurves, this._filter.isNormalized);\n\n            if (this._isActualChannelCurveNeeded) {\n                this._filter.updateActualChannelCurve(this._currentChannelIndex);\n                this._drawCurve();\n            }\n        }\n    }\n\n    private _mnuShowActualClick = (e: MouseEvent) => {\n        if (!e.button) {\n            this._isActualChannelCurveNeeded = !this._isActualChannelCurveNeeded;\n            this._checkMenu(this._mnuShowActual, this._isActualChannelCurveNeeded);\n\n            if (this._isActualChannelCurveNeeded) {\n                this._filter.updateActualChannelCurve(this._currentChannelIndex);\n            }\n\n            this._drawCurve();\n        }\n    }\n\n    private _btnMnuKeyDown = (e: KeyboardEvent) => {\n        if (keyPressed(e, 'ArrowUp', 'ArrowDown')) {\n            cancelEvent(e);\n            this._toggleMenu(keyPressed(e, 'ArrowUp'));\n\n            window.setTimeout(() => {\n                const items = this._mnu.querySelectorAll(`.${this._options.classNamespace!}MNUIT`);\n                (items[items.length - 1] as HTMLButtonElement).focus();\n            });\n        }\n    }\n\n    private _mnuKeyDown = (e: KeyboardEvent) => {\n\n        const moveFocus = (elem: Node, down: boolean) => {\n            const siblingProp = down ? 'nextSibling' : 'previousSibling';\n            let currentElem: Node | null = elem;\n\n            do {\n                currentElem = currentElem[siblingProp];\n\n                if (currentElem instanceof HTMLButtonElement &&\n                    currentElem.classList.contains(`${this._options.classNamespace!}MNUIT`)) {\n                    currentElem.focus();\n                    return true;\n                }\n            } while (currentElem);\n\n            return false;\n        };\n\n        if (keyPressed(e, 'ArrowUp', 'ArrowDown')) {\n            cancelEvent(e);\n            const down = keyPressed(e, 'ArrowDown');\n            if (!moveFocus(e.target as Node, down) && down) {\n                this._btnMnu.focus();\n            }\n        }\n    }\n\n    private _canvasMouseDown = (e: MouseEvent) => {\n        if (!e.button) {\n            if (!this._drawingMode) {\n                const { x, y } = elemCoords(this._canvas, e);\n\n                const normX = Math.floor(x / this._widthRatio());\n                const normY = y / this._heightRatio();\n\n                if (normX >= 0 && normX < this._filter.options.visibleBinCount!) {\n                    this._drawingMode = 1;\n                    if (this._editZones) {\n                        this._filter.changeZoneY(this._currentChannelIndex, normX, normY);\n                    }\n                    else {\n                        this._filter.channelCurves[this._currentChannelIndex][normX] = this._filter.clampY(normY);\n                        this._lastDrawX = normX;\n                        this._lastDrawY = normY;\n                    }\n\n                    this._drawCurve();\n\n                    if (this._canvas.setPointerCapture) {\n                        this._canvas.setPointerCapture((e as PointerEvent).pointerId);\n                    }\n                    else if (!(e as any).clonedFromTouch) {\n                        detachPointer(this._canvas, 'move', this._canvasMouseMove);\n                        detachPointer(this._canvas, 'up', this._canvasMouseUp);\n                        attachPointer(document, 'move', this._documentMouseMove, true);\n                        attachPointer(document, 'up', this._documentMouseUp, true);\n                    }\n                }\n            }\n\n            return cancelEvent(e);\n        }\n\n        return true;\n    }\n\n    private _canvasMouseUp = (e: MouseEvent) => {\n        if (this._drawingMode) {\n            this._drawingMode = 0;\n            this._filter.channelIndex = this._currentChannelIndex;\n            this._filter.updateFilter(false);\n\n            if (this._isActualChannelCurveNeeded) {\n                this._filter.updateActualChannelCurve(this._currentChannelIndex);\n            }\n\n            this._drawCurve();\n\n            if (this._canvas.releasePointerCapture) {\n                this._canvas.releasePointerCapture((e as PointerEvent).pointerId);\n            }\n            else if (!(e as any).clonedFromTouch) {\n                detachPointer(document, 'move', this._documentMouseMove, true);\n                detachPointer(document, 'up', this._documentMouseUp, true);\n                attachPointer(this._canvas, 'move', this._canvasMouseMove);\n                attachPointer(this._canvas, 'up', this._canvasMouseUp);\n            }\n        }\n    }\n\n    private _canvasMouseMove = (e: MouseEvent) => {\n        let curve = this._filter.channelCurves[this._currentChannelIndex];\n        const { x, y } = elemCoords(this._canvas, e);\n\n        if (this._drawingMode || (x >= 0 && x < this._canvas.width && y >= 0 && y < this._canvas.height)) {\n            let normX = Math.floor(x / this._widthRatio());\n            let normY = y / this._heightRatio();\n\n            if (normX < 0) {\n                normX = 0;\n            }\n            else if (normX >= this._filter.options.visibleBinCount!) {\n                normX = this._filter.options.visibleBinCount! - 1;\n            }\n\n            if (this._drawingMode) {\n                if (this._editZones) {\n                    this._filter.changeZoneY(this._currentChannelIndex, normX, normY);\n                }\n                else {\n                    if (Math.abs(normX - this._lastDrawX) > 1) {\n                        const delta = (normY - this._lastDrawY) / Math.abs(normX - this._lastDrawX);\n                        const inc = ((normX < this._lastDrawX) ? -1 : 1);\n                        normY = this._lastDrawY + delta;\n                        let count = Math.abs(normX - this._lastDrawX) - 1;\n\n                        for (normX = this._lastDrawX + inc; count > 0; normX += inc, count--) {\n                            curve[normX] = this._filter.clampY(normY);\n                            normY += delta;\n                        }\n                    }\n\n                    curve[normX] = this._filter.clampY(normY);\n                    this._lastDrawX = normX;\n                    this._lastDrawY = normY;\n                }\n                this._drawCurve();\n\n                if (this._options.updateFilterOnDrag) {\n                    // tslint:disable-next-line:no-magic-numbers\n                    throttledFunction(this._wrappedUpdateFilter, 150);\n                }\n            }\n            else if (this._isActualChannelCurveNeeded) {\n                curve = this._filter.actualChannelCurve;\n            }\n\n            this._setStatusBar(normX, normY, curve[normX]);\n\n            if (this._drawingMode) {\n                return cancelEvent(e);\n            }\n        }\n\n        return true;\n    }\n\n    private _windowResize = () => {\n        this._fixCanvasSize();\n    }\n\n    private _documentMouseMove = (e: MouseEvent) =>\n        this._canvasMouseMove(e);\n\n    private _documentMouseUp = (e: MouseEvent) => {\n        this._canvasMouseUp(e);\n    }\n\n    // virtual properties\n\n    get options(): ICanvasEqualizerOptions {\n        return deepAssign({}, defaultOptions, this._options);\n    }\n\n    get filterLength(): number {\n        return this._filter.filterLength;\n    }\n\n    set filterLength(newFilterLength: number) {\n        if (this._filter.filterLength !== newFilterLength) {\n            this._filter.filterLength = newFilterLength;\n\n            if (this._isActualChannelCurveNeeded) {\n                this._filter.updateActualChannelCurve(this._currentChannelIndex);\n            }\n\n            this._drawCurve();\n        }\n    }\n\n    get sampleRate(): number {\n        return this._filter.sampleRate;\n    }\n\n    set sampleRate(newSampleRate: number) {\n        if (this._filter.sampleRate !== newSampleRate) {\n            this._filter.sampleRate = newSampleRate;\n\n            if (this._isActualChannelCurveNeeded) {\n                this._filter.updateActualChannelCurve(this._currentChannelIndex);\n            }\n\n            this._drawCurve();\n        }\n    }\n\n    get audioContext(): AudioContext {\n        return this._filter.audioContext;\n    }\n\n    set audioContext(newAudioContext: AudioContext) {\n        if (this._filter.audioContext !== newAudioContext) {\n            this._filter.audioContext = newAudioContext;\n        }\n    }\n\n    get language(): string {\n        return this._l10n.language;\n    }\n\n    set language(language: string) {\n        this._l10n.language = language;\n    }\n\n    get visibleFrequencies(): Float32Array {\n        return this._filter.visibleFrequencies;\n    }\n\n    get convolver(): ConvolverNode {\n        return this._filter.convolver;\n    }\n}\n"],"names":["attachPointer","detachPointer","wrap","func","wrapper","tag","elem","wrapperTag","unwrap","push","ret","filter","entry","i","window","CustomEvent","e","MouseEvent","eventType","params","bubbles","cancelable","mouseEvent","document","createEvent","initMouseEvent","screenX","screenY","clientX","clientY","ctrlKey","altKey","shiftKey","metaKey","prototype","Event","PointerEvent","observable","eventName","targetFunction","capturePhase","addEventListener","removeEventListener","mappings","down","move","up","touch","changedTouches","pseudoMouse","clonedFromTouch","result","defaultPrevented","cancelEvent","forEach","mapping","runningFuncs","keyFix","Backspace","Escape","End","Home","ArrowLeft","ArrowUp","ArrowRight","ArrowDown","Delete","keyPressed","chr","Object","keys","indexOf","Array","isArray","key","keyCode","preventDefault","stopPropagation","throttledFunction","timeout","splice","setTimeout","requestAnimationFrame","elemCoords","rect","getBoundingClientRect","x","left","y","top","FFTComplex","data","n","isign","mmax","m","istep","wr","wpr","wpi","wi","theta","tempr","tempi","halfmmax","dj1","dj","nn","j","Math","PI","sin","FFTReal","i1","i2","i3","i4","d1","d2","d3","d4","c2","h1r","h1i","h2r","h2i","n4","defaultOptions","validYRangeHeight","visibleBinCount","Equalizer","filterLength","audioContext","options","_validateFilterLength","_options","deepAssign","_filterLength","_sampleRate","sampleRate","_isNormalized","_binCount","_audioContext","_filterKernel","createBuffer","this","_tmp","Float32Array","_channelCurves","Int16Array","_actualChannelCurve","_channelIndex","_zeroChannelValueY","_maximumChannelValue","_minimumChannelValue","_minusInfiniteChannelValue","_maximumChannelValueY","_minimumChannelValueY","_visibleFrequencies","_equivalentZones","Uint16Array","eqz","ratio","length","freqSteps","firstFreqs","f","map","num","round","_equivalentZonesFrequencyCount","s","reset","_convolver","createConvolver","normalize","buffer","updateFilter","updateActualChannelCurve","maxY","minY","Infinity","_lerp","exp","LN10","magnitude","zcy","log","visibleBinIndex","z","vf","vbc","ez","ezc","channelIndex","visibleBinToZoneIndex","ii","cy","clampY","curve","convolverCallback","oldConvolver","sourceChannel","destinationChannel","src","getChannelData","dst","_updateBuffer","updateBothChannels","max","isSameFilterLR","valueCount","bw","filterLength2","M_HALF_PI_FFTLEN2","invMaxMag","repeat","Number","mag","yToMagnitude","freq","avg","avgCount","k","cos","_applyWindowAndComputeActualMagnitudes","copyFilter","oldChannelIndex","tmp","magnitudeToY","M","PI2_M","maxMag","rval","ival","sqrt","newFilterLength","newSampleRate","isNormalized","newAudioContext","disconnect","slice","newChannelIndex","Error","x0","y0","x1","y1","L10n","language","_language","loadLocale","defaultLocale","locale","_locales","locales","undefined","str","get","args","arg","replace","RegExp","toLocaleString","classNamespace","filterOptions","updateFilterOnDrag","frequency","compact","unit","_l10n","format","_filter","button","_toggleMenu","_mnuChBClick","_isSameFilterLR","_currentChannelIndex","_isActualChannelCurveNeeded","_drawCurve","_checkMenu","_mnuChBL","_mnuChBR","_mnuChLRClick","_mnuChL","_mnuChR","_showZones","_mnuShowZones","_editZones","_canvas","classList","_mnuEditZones","_mnuNormalizeCurves","_mnuShowActual","items","_mnu","querySelectorAll","focus","moveFocus","siblingProp","currentElem","HTMLButtonElement","contains","target","_btnMnu","_drawingMode","normX","floor","_widthRatio","normY","_heightRatio","changeZoneY","channelCurves","_lastDrawX","_lastDrawY","setPointerCapture","pointerId","_canvasMouseMove","_canvasMouseUp","_documentMouseMove","_documentMouseUp","releasePointerCapture","width","height","abs","delta","inc","count","_wrappedUpdateFilter","actualChannelCurve","_setStatusBar","_fixCanvasSize","placeholder","_ctx","createLabel","name","content","lbl","createElement","className","clsNS","innerHTML","createMenuSep","setAttribute","createMenuLabel","text","l","textContent","createMenuItem","checkable","checked","clickHandler","type","dataset","appendChild","createTextNode","blur","_element","test","navigator","userAgent","MSStream","add","getComputedStyle","direction","_isRTL","_stb","_canvasMouseDown","running","addThrottledEvent","_windowResize","ctx","getContext","_lblCursor","_lblCurve","_lblFrequency","zeroChannelValueY","_btnMnuClick","_btnMnuKeyDown","_mnuKeyDown","_mnuChBLClick","_mnuChBRClick","_mnuChLClick","_mnuChRClick","_mnuShowZonesClick","_mnuEditZonesClick","_mnuNormalizeCurvesClick","_mnuShowActualClick","_rangeImage","clearTimeout","_barHideTimeout","dB","minimumFractionDigits","maximumFractionDigits","frequencyAndEquivalent","_formatFrequencyUnit","mnu","chk","inner","toggle","style","visibility","toString","call","firstChild","pixelRound","middleOffset","canvas","pixelRatio","devicePixelRatio","widthRatio","heightRatio","widthMinus1","fillStyle","fillRect","lineWidth","strokeStyle","beginPath","moveTo","lineTo","stroke","font","textAlign","fillText","equivalentZonesFrequencyCount","clientHeight","display","setTransform","createLinearGradient","addColorStop","label","span","querySelector","curveY","_setLabelParam","_formatDB","yToDB","_formatFrequency","visibleBinToFrequencyGroup","visibleFrequencies","convolver"],"mappings":"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"}